// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PromptTemplate {
  id           String   @id @default(cuid())
  name         String   @unique
  systemPrompt String
  alpha        Int      @default(1)
  beta         Int      @default(1)
  appearances  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // üîÅ back-relations nomeadas
  templateA Content[] @relation("TemplateA")
  templateB Content[] @relation("TemplateB")

  @@map("prompt_templates")
}

model Content {
  id              String   @id @default(uuid())
  prompt          String
  type            String
  optionACaption  String
  optionAHashtags String[]
  optionBCaption  String
  optionBHashtags String[]
  selectedOption  String?
  createdAt       DateTime @default(now())

  // üîó duas FKs para o mesmo modelo precisam de nomes de rela√ß√£o diferentes
  templateAId String?
  templateA   PromptTemplate? @relation("TemplateA", fields: [templateAId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  templateBId String?
  templateB   PromptTemplate? @relation("TemplateB", fields: [templateBId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([templateAId])
  @@index([templateBId])
  @@map("contents")
}
